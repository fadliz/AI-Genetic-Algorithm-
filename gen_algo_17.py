# -*- coding: utf-8 -*-
"""Gen Algo 17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-9hNWT51XaPraMlcoGBCvMQILKPojuaR

# V2 Test Section

test kromosom integer sampe 100

global Variables and Modules
"""

import math
import random
import copy
import matplotlib.pyplot as plt


# """
# global variable tracker :
# gtype_len
# enkode
# population_size
# cross_prob
# mutate_prob
# """

"""Class to make an individiual with kromosom and already calculated fitness"""

class individu(object) :

  def __init__(self,kromosom) :
    """ Inisialisasi suatu individu, masukin argumen ke parameter kromosom
    nanti dia punya kromosom itu. fitness otomatis nyari dari function fit(self)"""
    self.kromosom = kromosom
    self.fitness = self.fit()
  
  @classmethod #classmethod buat bikin gen random atau buat mutasi
  def create_genv1(self) :
    """ ambil bilangan integer dari 0 s/d 9 untuk dijadikan gen dari genotype"""
    gene = random.randint(0,9)
    return gene
  
  @classmethod #classmethod buat bikin gen random atau buat mutasi v2 untuk tanpa encoding gajelas
  def create_genv2(self) :
    """ ambil bilangan real dari -5 s/d 5 untuk dijadikan gen dari genotype"""
    gene = random.uniform(-5,5)
    return gene
  
  @classmethod #classmethod untuk membuat genotype ex : [0.47, 0.08, 0.13, 0.73, 0.92, 0.66]
  def create_genotype(self) :
    """membuat genotype x1 x2, direpresentasikan oleh array dimana setengah pertama adalah x1,
    setengah kedua adalah x2""" 
    global gtype_len
    global enkode
    if enkode == "true" :
      return [self.create_genv1() for _ in range(gtype_len)] #kalau genotype di enkoding jadi representasi lain, maka gen create random dengan representasi
    else :
      return [self.create_genv2() for _ in range(gtype_len)] #kalau genotype tidak enkoding jadi representasi lain, maka gen create random x dan y langsung

  def decode_gen(self,fheno) :
    """dekoding genotype x1 menjadi fhenotype nya"""
    g = self.kromosom
    global gtype_len
    N = int(gtype_len / 2)
    summation = 0
    gn = 0
    if fheno == "x" : #kalau nyari x, mulai array/list dari 0
      n = 0
      nn = 0
    else : #kalau nyari y, mulai array dari setengah + 1
      n = N
      nn = N
    for i in range(0,N) :
      summation += 10**(-1 * (i+1)) #bagian pembagi di rumus decoding
      gn += g[n] * (10**(-1 * (i+1))) #bagian pengkali di rumus decoding
      n+=1
    decoded = -5 + ((5-(-5))/(summation*9)) * gn #hasil akhir rumus h(x,y)
    if enkode == "true" :
      return decoded #kalau di enkode, return hasil rumus
    else :
      return g[nn] #kalau tidak enkode, return langsung gen nya karna sdh langsung nilai x/y nya

  def fit(self) : #def mencari fitness
    """dekode genotype x1,x2 jika perlu untuk mencari fitness yang aslinya"""
    global enkode
    if enkode == "true" :
      fhenox = self.decode_gen("x") #decode gen dari representasi kromosom menjadi x
      fhenoy = self.decode_gen("y") #decode gen dari representasi kromosom menjadi y
    else :
      fhenox = self.kromosom[0] #array[0] dari kromosom adalah x
      fhenoy = self.kromosom[1] #array[1] dari kromosom adalah y
    h = ( (math.cos(fhenox) + math.sin(fhenoy))**2 / (fhenox**2 + fhenoy**2) ) #rumus h(x,y)
    return 1/(h) #return kebalikan h karena ingin hasil fungsi atau h menjadi minimum

"""# Functions

membuat populasi dengan individu yang berkromosom random
"""

def generate_population(populasi) :
  global population_size 
  for _ in range(0,population_size) : #loop dari 0 sampai ukuran populasi
    populasi.append(individu(individu.create_genotype())) #membuat individu baru, lalu dimasukkan kedalam array populasi

# enkode = input('Di enkode? true false? : ')
# if enkode == "true" :
#   gtype_len = int(input('panjang genotype? : '))
# else :
#   gtype_len = 2
# population_size = int(input('banyak populasi? : '))

# population = []
# generate_population(population)

# for i in range(0,population_size) :
#   print("Individu ke-{}\t kromosom {}\t fitness = {}".\
#         format(i+1,population[i].kromosom,population[i].fitness))

"""mencari max dan min dari populasi"""

def maxfit(populasi) :
  idxmax = 0
  for i in range(0,population_size) : #loop dari 0 sampai ukuran populasi
    if populasi[i].fitness >= populasi[idxmax].fitness : #kalau fitness i terloop lebih besar dari fitness max sebelumnya, swap
      idxmax = i
  return idxmax

def minfit(populasi) : 
  idxmin = 0
  for i in range(0,population_size) : #loop dari 0 sampai ukuran populasi
    if populasi[i].fitness <= populasi[idxmin].fitness : #kalau fitness i terloop lebih kecil dari fitness min sebelumnya, swap
      idxmin = i
  return idxmin

# print("Individu terbaik {} dengan fitness {}\nIndividu terburuk {} dengan fitness {}".\
#       format(population[maxfit(population)].kromosom,population[maxfit(population)].fitness,population[minfit(population)].kromosom, population[minfit(population)].fitness))

"""Mengseleksi parent dari populasi melalui suatu metode"""

def seleksi_parent(populasi) :
  allfit = 0 #init total fitness populasi
  for i in range(0,population_size) : 
    allfit += populasi[i].fitness #increment total fitness populasi dengan fitness tiap individu di populasi
  r = random.random()
  individu_ke = 0
  r -= populasi[individu_ke].fitness / allfit #melakukan seleksi roulette dengan cara kurangi angka random dengan (fitness tiap individu dibagi fitness total) sampai < 0
  while r > 0:
    individu_ke += 1
    r -= populasi[individu_ke].fitness / allfit
  temp = copy.deepcopy(populasi[individu_ke]) #copy individu ke variabel lain agar tidak bentrok
  return temp

# par1, par2 = seleksi_parent(population), seleksi_parent(population)
# print("Parent 1 {} dengan fitness {}\nParent 2 {} dengan fitness {}".\
#       format(par1.kromosom, par1.fitness, par2.kromosom, par2.fitness))

"""mating secara cross dengan menghasilkan dua offspring"""

def mating_cross(par1, par2) :
  global cross_prob
  global gtype_len
  prob = random.random()
  temp1,temp2 = par1.kromosom.copy(), par2.kromosom.copy() #copy agar tidak bentrok
  if prob < cross_prob : #jika angka random penentu lebih kecil dari probabilitas mating cross, jalan
    rand = random.randint(1,gtype_len-1) #random angka untuk menentukan titik cross
    for i in range(rand,gtype_len) : #swap antar parent
      temp = par1.kromosom[i]
      par1.kromosom[i] = par2.kromosom[i]
      par2.kromosom[i] = temp
    offspring1, offspring2 = individu(par1.kromosom), individu(par2.kromosom) #buat individu baru dengan kromosom cross sebelumnya
    par1.kromosom, par2.kromosom = temp1.copy(), temp2.copy() #undo swap dengan cara copy
  else : #probabilitas tidak terpenuhi, anak adalah parent
    offspring1 = individu(par1.kromosom)
    offspring2 = individu(par2.kromosom)
    par1.kromosom, par2.kromosom = temp1.copy(), temp2.copy()
  return [offspring1,offspring2]
# cross_prob = float(input("probabilitas mating cross : "))
# child1,child2 = mating_cross(par1,par2)
# print("Child 1 {} dengan fitness {}\nChild 2 {} dengan fitness {}".\
#       format(child1.kromosom, child1.fitness, child2.kromosom, child2.fitness))

"""Child di mutasi jika probabilitas mutasi mencukupi"""

def mating_mutation(mutation) :
  global mutate_prob
  global enkode
  for i in range(0,len(mutation.kromosom)-1) : #loop sampai ujung kromosom
    krom_mutate = random.random()
    
    if krom_mutate < mutate_prob :
      
      if enkode == "true" :
        mutation.kromosom[i] = random.randint(0,9) #kalau probabilitas terpenuhi, dan di enkode, tukar gen dengan angka int random
      else :
        mutation.kromosom[i] = random.uniform(-5,5) #kalau probabilitas terpenuhi, dan tidak enkode, tukar gen dengan angka real random
  mutated = individu(mutation.kromosom)
  return mutated

# mutate_prob = 0.01
# mutated_child1, mutated_child2 = mating_mutation(child1), mating_mutation(child2)
# print("Child 1 {} dengan fitness {}\nChild 2 {} dengan fitness {}".\
#       format(mutated_child1.kromosom, mutated_child1.fitness, mutated_child2.kromosom, mutated_child2.fitness))

"""Elitisme memilih 2 individu terbaik untuk menjadi generasi selanjutnya"""

def elitism(populasi) :
  t1 = maxfit(populasi) #fitness tertinggi pertama
  temp, populasi[t1].fitness = populasi[t1].fitness, 0 #hapus dr populasi sesaat untuk mencari yg kedua
  t2 = maxfit(populasi) #fitness tertinggi kedua
  populasi[t1].fitness = temp #undo hapus
  elite1 = copy.deepcopy(populasi[t1])
  elite2 = copy.deepcopy(populasi[t2])
  return [elite1, elite2]

# elite1, elite2 = elitism(population)
# print("Individu terbaik 1 {} dengan fitness {}\nIndividu terbaik 2 {} dengan fitness {}".\
#       format(elite1.kromosom, elite1.fitness, elite2.kromosom, elite2.fitness))

"""Sorting algorithm untuk sort individu dari fitness terbesar"""

def selection_sort(populasi):
   for idx in range(len(populasi)):
      max_idx = idx
      for j in range( idx +1, len(populasi)):
         if populasi[max_idx].fitness < populasi[j].fitness:
          max_idx = j
# Swap the minimum value with the compared value
      populasi[idx], populasi[max_idx] = copy.deepcopy(populasi[max_idx]), copy.deepcopy(populasi[idx])

# enkode = "true"
# if enkode == "true" :
#   gtype_len = 10
# else :
#   gtype_len = 2
# population = []
# population_size = 10
# generate_population(population)
# for i in range(0,population_size) :
#   print("Individu ke-{}\t kromosom {}\t fitness = {}".\
#         format(i+1,population[i].kromosom,population[i].fitness))
# selection_sort(population)
# print("\n")
# for i in range(0,population_size) :
#   print("Individu ke-{}\t kromosom {}\t fitness = {}".\
#         format(i+1,population[i].kromosom,population[i].fitness))

"""Replace generasi lama dengan generasi baru"""

def generation_replace(populasi) :
  if not populasi :
    generate_population(populasi) #buat populasi jika kosong

  else :
    newPopulation = [] 
    newPopulation.extend(elitism(populasi)) #isi populasi baru dengan 2 individu terbaik
    while len(newPopulation) < population_size :
      par1,par2 = seleksi_parent(populasi), seleksi_parent(populasi)  #cari parent
      #print(par1.kromosom,par2.kromosom)
      offspring1, offspring2 = mating_cross(par1,par2) #cross kedua parent, dapat 2 anak
      offspring1, offspring2 = copy.deepcopy(mating_mutation(offspring1)), copy.deepcopy(mating_mutation(offspring2)) #2 anak dimutasi
      newPopulation.append(offspring1)
      newPopulation.append(offspring2) #masukkan anak2 baru
    populasi = newPopulation.copy() #overwrite populasi dengan yang baru

  return populasi

# population = generation_replace(population)
# for i in range(0,population_size) :
#   print("Individu ke-{0}\t kromosom {1}\t fitness = {2}\tNilai fungsi = {3:10.15f}".\
#         format(i+1,population[i].kromosom,population[i].fitness,(1/population[i].fitness)-1))

"""Kriteria pemberhentian generasi, generasi = 100

#Driver Code/ Main code
"""

population = []
populati = []
plotx = []
ploty = []
enkode = input('Apakah kromosom di enkode ke representasi lain? true false? : ')
if enkode == "true" :
  gtype_len = int(input('Masukkan panjang genotype : '))
else :
  gtype_len = 2
population_size = int(input('Masukkan banyak individu dalam 1 populasi : '))
cross_prob = float(input('Masukkan probabilitas mating cross : '))
mutate_prob = float(input('Masukkan probabilitas mutasi : '))
generation = int(input('Masukkan banyak generasi : '))

for i in range(1,generation+1) :
  populati = generation_replace(populati)
  population = copy.deepcopy(populati) #copy populasi untuk di print yang sudah terurut
  #selection_sort(population)
  print("\nGenerasi {}".\
        format(i))
  for n in range(0,population_size) :
    print("Individu ke-{0}\t kromosom {1}\tx,y = ({2},{3})\tfitness = {4}\tNilai fungsi = {5:10.15f}".\
          format(n+1 ,population[n].kromosom, population[n].decode_gen("x"), population[n].decode_gen("y"), population[n].fitness, (1/population[n].fitness)))
  best_case = population[maxfit(population)]
  ploty.append(best_case.fitness)
  plotx.append(i)
  plt.plot(plotx,ploty)
  plt.xlabel('x - iterasi')
  plt.ylabel('y - fitness')
  plt.title('Genetic Algorithm')
  plt.show()

print("\n\nIndividu terbaik --> Kromosom {}\tNilai x,y = {},{}\tFitness = {}\tNilai fungsi = {}".\
      format(best_case.kromosom, best_case.decode_gen("x"), best_case.decode_gen("y"), best_case.fitness, 1/best_case.fitness))